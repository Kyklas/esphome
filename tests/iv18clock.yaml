# PINs:

# LED1 IO2
# LED2 IO4
# SW_TOP    IO35
# SW_BACk   IO34  
# buzzer    io21

esp32:
  board: esp32dev
  framework:
    type: arduino

esphome:
  name: iv18clock
  on_boot:
    then:
      - light.turn_on: 
          id: red_led
          brightness: 10%
      - light.turn_on: 
          id: st_led
          brightness: 1%

# custom_component:
# - lambda: |-
#     esphome::Component* iv18 = new MAX6921_IV18();
#     return {iv18};
#   components:
#   - id: iv18_id

external_components:
  - source: esphome-component-max6921iv18

display:
  - platform: max6921iv18
    id: iv18
    enable_pin:
      number: 32
      inverted: true
    clock_pin: 25
    data_pin: 27
    latch_pin: 26
    oe_pin:
      number: 33
      inverted: true
    # lambda: |-
    #   it.strftime("%H-%M-%S", id(esptime).now());
    pages:
      - id: page1
        lambda: |-
          //it.print("01234567");
          it.strftime("%H-%M-%S", id(esptime).now());
      - id: page2
        lambda: |-
          //it.print("01234567");
          it.strftime("%d %b", id(esptime).now());

interval:
  - interval: 10s
    then:
      - display.page.show: page1
      - component.update: iv18
      - delay: 5s
      - display.page.show: page2
      - component.update: iv18

# display:
# - platform: custom
#   lambda: |-
#     auto iv18 = new MAX6921_IV18();
#     App.register_component(iv18);
#     return {iv18};
#   displays:
#     name: "IV18"
    

# # Example configuration entry
# spi:
#   clk_pin: 0
#   mosi_pin: 1

# display:
#   - platform: max7219
#     cs_pin: 2
#     num_chips: 1
#     lambda: |-
#       it.print("01234567");

# Enable logging
logger:
  level: DEBUG


light:
  - platform: monochromatic
    name: "Red LED"
    output: SW_LED
    id: red_led
  - platform: monochromatic
    name: "Status LED"
    output: LED_ST
    id: st_led

output:
  - platform: ledc
    id: LED_ST
    pin: 
      number: GPIO2
      drive_strength: 20mA
  - platform: ledc
    id: SW_LED
    pin: 
      number: GPIO4
      drive_strength: 20mA
  - platform: ledc
    id: buzzer
    pin:
       number: GPIO21
       drive_strength: 20mA
 
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: "TopSW"
  - platform: gpio
    pin:
      number: GPIO34
      inverted: true
    name: "BackSW"

# api:
#   encryption:
#     key: !secret light_api_key
#   services:
#     - service: play_buzzer
#       variables:
#         song_str: string
#       then:
#         - rtttl.play:
#             rtttl: !lambda 'return song_str;'

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

web_server:
  port: 80

time:
  - platform: sntp
    id: esptime

# # ota:
# #   password: !secret light_ota_password

# sensor:
#   - platform: wifi_signal
#     name: "WiFi Signal Sensor"
#     update_interval: 60s

# rtttl:
#   output: buzzer
#   on_finished_playback:
#     - logger.log: 'Song ended!'

# binary_sensor:
#   - platform: gpio
#     pin:
#       number: GPIO35
#       inverted: true
#     name: "TopSW"
#     on_press:
#       then:
#         - rtttl.play: 'siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e'
#         - light.turn_on:
#             id: red_led
#             brightness: 80%
#         - delay: 2s
#         - light.turn_on:
#             id: red_led
#             brightness: 20%
#   - platform: gpio
#     pin:
#       number: GPIO34
#       inverted: true
#     name: "BackSW"
#     on_press:
#       then:
#         - rtttl.play: 'mission_imp:d=16,o=6,b=95:32d,32d#,32d,32d#,32d,32d#,32d,32d#,32d,32d,32d#,32e,32f,32f#,32g,g,8p,g,8p,a#,p,c7,p,g,8p,g,8p,f,p,f#,p,g,8p,g,8p,a#,p,c7,p,g,8p,g,8p,f,p,f#,p,a#,g,2d,32p,a#,g,2c#,32p,a#,g,2c,a#5,8c,2p,32p,a#5,g5,2f#,32p,a#5,g5,2f,32p,a#5,g5,2e,d#,8d'
#         - light.turn_on:
#             id: red_led
#             brightness: 80%
#         - delay: 2s
#         - light.turn_on:
#             id: red_led
#             brightness: 20%
